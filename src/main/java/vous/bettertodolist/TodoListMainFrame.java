/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package vous.bettertodolist;

import GoogleClassroomList.GoogleClassroomProcess;
import GoogleClassroomList.GoogleClassroomTodoListInfo;
import NotesList.NotesListInfo;
import NotesList.NotesListNewNote;
import TodoList.StatusUpdate;
import TodoList.TodoListInfo;
import TodoList.TodoListNewInfo;
import java.awt.Frame;
import java.awt.GridBagConstraints;
import java.awt.Image;
import java.awt.Insets;
import java.awt.Toolkit;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.List;
import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;
import javax.swing.filechooser.FileNameExtensionFilter;

public class TodoListMainFrame extends javax.swing.JFrame {
    int mousePositionX;
    int mousePositionY;
    int screenLocationX;
    int screenLocationY;
    int taskCounter = 0;
    boolean oneInstanceTask = false;
    boolean oneInstanceNote = false;
    boolean oneInstanceSecondThread = false;
    String title;
    GridBagConstraints gbc;
    ImageIcon icon;
    
    public TodoListMainFrame() {
        scale();
        initComponents();
        checkCredentials();
        StatusUpdate update = new StatusUpdate();
        update.checkStatus();
        setScreenLocation();
        refreshAllList();
        refreshNotes();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jComboBox1 = new javax.swing.JComboBox<>();
        TopNavbar = new javax.swing.JPanel();
        TodoButton = new javax.swing.JLabel();
        NotesButton = new javax.swing.JLabel();
        CloseButton = new javax.swing.JLabel();
        MinimizeButton = new javax.swing.JLabel();
        TopNavbarActions = new javax.swing.JLabel();
        MainPanel = new javax.swing.JTabbedPane();
        TodoPanel = new javax.swing.JPanel();
        TodoOverview = new javax.swing.JPanel();
        UnfinishedTask = new javax.swing.JLabel();
        ProfilePicture = new javax.swing.JLabel();
        AddNewTask = new javax.swing.JButton();
        refreshClassTodo = new javax.swing.JButton();
        GoogleLogin = new javax.swing.JButton();
        GoogleLogout = new javax.swing.JButton();
        Tip = new javax.swing.JLabel();
        TodoScroller = new javax.swing.JScrollPane();
        List = new javax.swing.JPanel();
        NotesPanel = new javax.swing.JPanel();
        NotesList = new javax.swing.JPanel();
        NotesListTitle = new javax.swing.JLabel();
        AddNewNote = new javax.swing.JButton();
        NotesScroller = new javax.swing.JScrollPane();
        Notes = new javax.swing.JPanel();
        NotePanel = new javax.swing.JPanel();
        Title = new javax.swing.JLabel();
        NoteScroller = new javax.swing.JScrollPane();
        Note = new javax.swing.JTextArea();
        SaveNote = new javax.swing.JButton();
        DeleteNote = new javax.swing.JButton();

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Better ToDo List");
        setIconImage(Toolkit.getDefaultToolkit().createImage((System.getProperty("user.dir")+"//bettertodolist.png")));
        setUndecorated(true);
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        TopNavbar.setBackground(new java.awt.Color(244, 252, 217));
        TopNavbar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        TopNavbar.setMinimumSize(new java.awt.Dimension(720, 40));
        TopNavbar.setPreferredSize(new java.awt.Dimension(720, 40));
        TopNavbar.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        TodoButton.setBackground(new java.awt.Color(229, 239, 193));
        TodoButton.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        TodoButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/todolist-icon.png"))); // NOI18N
        TodoButton.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        TodoButton.setMaximumSize(new java.awt.Dimension(33, 33));
        TodoButton.setMinimumSize(new java.awt.Dimension(33, 33));
        TodoButton.setPreferredSize(new java.awt.Dimension(33, 33));
        TodoButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TodoButtonMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                TodoButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                TodoButtonMouseExited(evt);
            }
        });
        TopNavbar.add(TodoButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(327, 4, -1, -1));

        NotesButton.setBackground(new java.awt.Color(229, 239, 193));
        NotesButton.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        NotesButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/notes-icon.png"))); // NOI18N
        NotesButton.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        NotesButton.setMaximumSize(new java.awt.Dimension(33, 33));
        NotesButton.setMinimumSize(new java.awt.Dimension(33, 33));
        NotesButton.setPreferredSize(new java.awt.Dimension(33, 33));
        NotesButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                NotesButtonMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                NotesButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                NotesButtonMouseExited(evt);
            }
        });
        TopNavbar.add(NotesButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(368, 4, -1, -1));

        CloseButton.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        CloseButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/close-icon.png"))); // NOI18N
        CloseButton.setMaximumSize(new java.awt.Dimension(16, 16));
        CloseButton.setMinimumSize(new java.awt.Dimension(16, 16));
        CloseButton.setPreferredSize(new java.awt.Dimension(16, 16));
        CloseButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CloseButtonMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                CloseButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                CloseButtonMouseExited(evt);
            }
        });
        TopNavbar.add(CloseButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 12, -1, -1));

        MinimizeButton.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        MinimizeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/minimize-icon.png"))); // NOI18N
        MinimizeButton.setMaximumSize(new java.awt.Dimension(16, 16));
        MinimizeButton.setMinimumSize(new java.awt.Dimension(16, 16));
        MinimizeButton.setPreferredSize(new java.awt.Dimension(16, 16));
        MinimizeButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                MinimizeButtonMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                MinimizeButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                MinimizeButtonMouseExited(evt);
            }
        });
        TopNavbar.add(MinimizeButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 12, -1, -1));

        TopNavbarActions.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                TopNavbarActionsMouseDragged(evt);
            }
        });
        TopNavbarActions.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                TopNavbarActionsMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                TopNavbarActionsMouseReleased(evt);
            }
        });
        TopNavbar.add(TopNavbarActions, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 720, 40));

        getContentPane().add(TopNavbar, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        MainPanel.setMinimumSize(new java.awt.Dimension(720, 440));
        MainPanel.setPreferredSize(new java.awt.Dimension(720, 440));

        TodoPanel.setBackground(new java.awt.Color(244, 252, 217));
        TodoPanel.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        TodoPanel.setMinimumSize(new java.awt.Dimension(705, 440));
        TodoPanel.setPreferredSize(new java.awt.Dimension(705, 440));
        TodoPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        TodoOverview.setBackground(new java.awt.Color(229, 239, 193));
        TodoOverview.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        TodoOverview.setMinimumSize(new java.awt.Dimension(190, 410));
        TodoOverview.setPreferredSize(new java.awt.Dimension(190, 410));
        TodoOverview.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        UnfinishedTask.setFont(new java.awt.Font("Yu Gothic UI Semibold", 1, 12)); // NOI18N
        UnfinishedTask.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        UnfinishedTask.setText("Unfinished Task:");
        UnfinishedTask.setMaximumSize(new java.awt.Dimension(190, 16));
        UnfinishedTask.setMinimumSize(new java.awt.Dimension(190, 16));
        UnfinishedTask.setPreferredSize(new java.awt.Dimension(190, 16));
        TodoOverview.add(UnfinishedTask, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 190, 190, -1));

        ProfilePicture.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        ProfilePicture.setIcon(icon);
        ProfilePicture.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        ProfilePicture.setMaximumSize(new java.awt.Dimension(100, 100));
        ProfilePicture.setMinimumSize(new java.awt.Dimension(100, 100));
        ProfilePicture.setPreferredSize(new java.awt.Dimension(100, 100));
        ProfilePicture.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ProfilePictureMouseClicked(evt);
            }
        });
        TodoOverview.add(ProfilePicture, new org.netbeans.lib.awtextra.AbsoluteConstraints(45, 60, -1, -1));

        AddNewTask.setBackground(new java.awt.Color(244, 252, 217));
        AddNewTask.setText("Add New Task");
        AddNewTask.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddNewTaskActionPerformed(evt);
            }
        });
        TodoOverview.add(AddNewTask, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 360, 130, -1));

        refreshClassTodo.setBackground(new java.awt.Color(244, 252, 217));
        refreshClassTodo.setText("Refresh Tasks");
        refreshClassTodo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshClassTodoActionPerformed(evt);
            }
        });
        TodoOverview.add(refreshClassTodo, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 330, 130, -1));

        GoogleLogin.setBackground(new java.awt.Color(244, 252, 217));
        GoogleLogin.setText("Login to Google");
        GoogleLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GoogleLoginActionPerformed(evt);
            }
        });
        TodoOverview.add(GoogleLogin, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 220, 130, -1));

        GoogleLogout.setBackground(new java.awt.Color(244, 252, 217));
        GoogleLogout.setText("Logout Google");
        GoogleLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GoogleLogoutActionPerformed(evt);
            }
        });
        TodoOverview.add(GoogleLogout, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 220, 130, -1));

        Tip.setFont(new java.awt.Font("Yu Gothic UI Semibold", 1, 12)); // NOI18N
        Tip.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Tip.setMaximumSize(new java.awt.Dimension(190, 16));
        Tip.setMinimumSize(new java.awt.Dimension(190, 16));
        Tip.setPreferredSize(new java.awt.Dimension(190, 16));
        TodoOverview.add(Tip, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 280, 190, 40));

        TodoPanel.add(TodoOverview, new org.netbeans.lib.awtextra.AbsoluteConstraints(15, 25, -1, -1));

        TodoScroller.setBorder(null);

        List.setBackground(new java.awt.Color(229, 239, 193));
        List.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        List.setLayout(new java.awt.GridBagLayout());
        TodoScroller.setViewportView(List);
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.weighty = 1;
        gbc.fill = GridBagConstraints.NONE;
        gbc.insets = new Insets(5,0,0,0);

        TodoPanel.add(TodoScroller, new org.netbeans.lib.awtextra.AbsoluteConstraints(215, 25, 490, 410));

        MainPanel.addTab("tab1", TodoPanel);

        NotesPanel.setBackground(new java.awt.Color(244, 252, 217));
        NotesPanel.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        NotesPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        NotesList.setBackground(new java.awt.Color(229, 239, 193));
        NotesList.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        NotesList.setMinimumSize(new java.awt.Dimension(190, 410));
        NotesList.setPreferredSize(new java.awt.Dimension(190, 410));
        NotesList.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        NotesListTitle.setFont(new java.awt.Font("Yu Gothic UI Semibold", 1, 12)); // NOI18N
        NotesListTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        NotesListTitle.setText("Notes List");
        NotesListTitle.setMaximumSize(new java.awt.Dimension(190, 16));
        NotesListTitle.setMinimumSize(new java.awt.Dimension(190, 16));
        NotesListTitle.setPreferredSize(new java.awt.Dimension(190, 16));
        NotesList.add(NotesListTitle, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 10, -1, -1));

        AddNewNote.setBackground(new java.awt.Color(244, 252, 217));
        AddNewNote.setText("Add New Note");
        AddNewNote.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddNewNoteActionPerformed(evt);
            }
        });
        NotesList.add(AddNewNote, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 370, 130, -1));

        NotesScroller.setBackground(new java.awt.Color(229, 239, 193));
        NotesScroller.setBorder(null);

        Notes.setBackground(new java.awt.Color(229, 239, 193));
        Notes.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        Notes.setLayout(new java.awt.GridBagLayout());
        NotesScroller.setViewportView(Notes);

        NotesList.add(NotesScroller, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 30, 190, 330));

        NotesPanel.add(NotesList, new org.netbeans.lib.awtextra.AbsoluteConstraints(15, 25, -1, -1));

        NotePanel.setBackground(new java.awt.Color(229, 239, 193));
        NotePanel.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        NotePanel.setPreferredSize(new java.awt.Dimension(490, 410));
        NotePanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        Title.setMaximumSize(new java.awt.Dimension(470, 16));
        Title.setMinimumSize(new java.awt.Dimension(470, 16));
        Title.setPreferredSize(new java.awt.Dimension(470, 16));
        NotePanel.add(Title, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 300, 16));

        NoteScroller.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        NoteScroller.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        Note.setBackground(new java.awt.Color(244, 252, 217));
        Note.setColumns(20);
        Note.setLineWrap(true);
        Note.setRows(5);
        Note.setBorder(BorderFactory.createEmptyBorder(10,10,10,10));
        Note.setName(""); // NOI18N
        NoteScroller.setViewportView(Note);

        NotePanel.add(NoteScroller, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, 470, 370));

        SaveNote.setBackground(new java.awt.Color(244, 252, 217));
        SaveNote.setText("Save");
        SaveNote.setPreferredSize(new java.awt.Dimension(72, 16));
        SaveNote.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveNoteActionPerformed(evt);
            }
        });
        NotePanel.add(SaveNote, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 10, -1, -1));

        DeleteNote.setBackground(new java.awt.Color(244, 252, 217));
        DeleteNote.setText("Delete");
        DeleteNote.setPreferredSize(new java.awt.Dimension(72, 16));
        DeleteNote.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteNoteActionPerformed(evt);
            }
        });
        NotePanel.add(DeleteNote, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 10, -1, -1));

        NotesPanel.add(NotePanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(215, 25, -1, -1));

        MainPanel.addTab("tab2", NotesPanel);

        getContentPane().add(MainPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, 480));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void firstStart(){
        refreshClassTodoActionPerformed(null);
    }
    
    private void TodoButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TodoButtonMouseClicked
        MainPanel.setSelectedComponent(TodoPanel);
    }//GEN-LAST:event_TodoButtonMouseClicked

    private void NotesButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_NotesButtonMouseClicked
        MainPanel.setSelectedComponent(NotesPanel);
    }//GEN-LAST:event_NotesButtonMouseClicked

    private void CloseButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CloseButtonMouseClicked
        System.exit(0);
    }//GEN-LAST:event_CloseButtonMouseClicked

    private void MinimizeButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MinimizeButtonMouseClicked
        this.setState(Frame.ICONIFIED);
    }//GEN-LAST:event_MinimizeButtonMouseClicked

    private void TopNavbarActionsMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TopNavbarActionsMousePressed
        mousePositionX = evt.getX();
        mousePositionY = evt.getY();
    }//GEN-LAST:event_TopNavbarActionsMousePressed

    private void TopNavbarActionsMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TopNavbarActionsMouseDragged
        int coordinateX = evt.getXOnScreen();
        int coordinateY = evt.getYOnScreen();
        screenLocationX = (coordinateX-mousePositionX);
        screenLocationY = (coordinateY-mousePositionY);
        this.setLocation(screenLocationX, screenLocationY);
    }//GEN-LAST:event_TopNavbarActionsMouseDragged

    private void AddNewTaskActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddNewTaskActionPerformed
        if (oneInstanceTask == false && oneInstanceSecondThread == false){
            TodoListNewInfo addNew = new TodoListNewInfo();
            List.add(addNew, gbc);
            oneInstanceTask = true;
            revalidate();

            addNew.getDone().addMouseListener(new MouseAdapter(){
                @Override
                public void mousePressed(MouseEvent e){
                    if (oneInstanceSecondThread == false){
                        oneInstanceSecondThread = true;
                        SwingWorker<Boolean, Void> worker = new SwingWorker<Boolean, Void>(){

                            @Override
                            protected Boolean doInBackground() throws Exception {
                                oneInstanceSecondThread = true;
                                addNew.changeState();
                                return true;
                            }

                            @Override
                            protected void done(){
                                try {
                                    Boolean status = get();
                                    if (status == true){
                                        deleteFrame();
                                    }
                                } catch (Exception e) {
                                    JOptionPane.showMessageDialog(null, "An error occured while trying to create new task! ", "Error!", JOptionPane.PLAIN_MESSAGE);
                                }
                            }
                        };
                        worker.execute();
                    }
                }
            });

            addNew.getCancel().addMouseListener(new MouseAdapter(){
                @Override
                public void mousePressed(MouseEvent e){
                    if (oneInstanceSecondThread == false){
                        SwingWorker<Boolean, Void> worker = new SwingWorker<Boolean, Void>(){

                            @Override
                            protected Boolean doInBackground() throws Exception {
                                oneInstanceSecondThread = true;
                                addNew.removePanel();
                                return true;
                            }

                            @Override
                            protected void done(){
                                try {
                                    Boolean status = get();
                                    if (status == true){
                                        deleteFrame();
                                    }
                                } catch (Exception e) {
                                    JOptionPane.showMessageDialog(null, "An error occured while trying to create new task! ", "Error!", JOptionPane.PLAIN_MESSAGE);
                                }
                            }
                        };
                        worker.execute();
                    }
                }
            });
        }
    }//GEN-LAST:event_AddNewTaskActionPerformed
    
    private void TodoButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TodoButtonMouseEntered
        TodoButton.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(51,102,255), 2, true));
    }//GEN-LAST:event_TodoButtonMouseEntered

    private void TodoButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TodoButtonMouseExited
        TodoButton.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
    }//GEN-LAST:event_TodoButtonMouseExited

    private void NotesButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_NotesButtonMouseEntered
        NotesButton.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(51,102,255), 2, true));
    }//GEN-LAST:event_NotesButtonMouseEntered

    private void NotesButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_NotesButtonMouseExited
        NotesButton.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
    }//GEN-LAST:event_NotesButtonMouseExited

    private void CloseButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CloseButtonMouseEntered
        CloseButton.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, false));
    }//GEN-LAST:event_CloseButtonMouseEntered

    private void CloseButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CloseButtonMouseExited
        CloseButton.setBorder(null);
    }//GEN-LAST:event_CloseButtonMouseExited

    private void MinimizeButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MinimizeButtonMouseEntered
        MinimizeButton.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, false));
    }//GEN-LAST:event_MinimizeButtonMouseEntered

    private void MinimizeButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MinimizeButtonMouseExited
        MinimizeButton.setBorder(null);
    }//GEN-LAST:event_MinimizeButtonMouseExited

    private void AddNewNoteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddNewNoteActionPerformed
        if(oneInstanceNote == false && oneInstanceSecondThread == false){
            NotesListNewNote addNew = new NotesListNewNote();
            Notes.add(addNew, gbc);
            oneInstanceNote = true;
            revalidate();

            addNew.getDone().addMouseListener(new MouseAdapter(){
                @Override
                public void mousePressed(MouseEvent e){
                    if (oneInstanceSecondThread == false){
                        SwingWorker<Boolean, Void> worker = new SwingWorker<Boolean, Void>(){

                            @Override
                            protected Boolean doInBackground() throws Exception {
                                oneInstanceSecondThread = true;
                                addNew.changeState();
                                return true;
                            }

                            @Override
                            protected void done(){
                                try {
                                    Boolean status = get();
                                    if (status == true){
                                        deleteFrame();
                                    }
                                } catch (Exception e) {
                                    JOptionPane.showMessageDialog(null, "An error occured while  ", "Error!", JOptionPane.PLAIN_MESSAGE);
                                }
                            }
                        };
                        worker.execute();
                    }
                }
            });

            addNew.getCancel().addMouseListener(new MouseAdapter(){
                @Override
                public void mousePressed(MouseEvent e){
                    if (oneInstanceSecondThread == false){
                        SwingWorker<Boolean, Void> worker = new SwingWorker<Boolean, Void>(){

                            @Override
                            protected Boolean doInBackground() throws Exception {
                                oneInstanceSecondThread = true;
                                addNew.removePanel();
                                return true;
                            }

                            @Override
                            protected void done(){
                                try {
                                    Boolean status = get();
                                    if (status == true){
                                        deleteFrame();
                                    }
                                } catch (Exception e) {
                                    JOptionPane.showMessageDialog(null, "An error occured while  ", "Error!", JOptionPane.PLAIN_MESSAGE);
                                }
                            }
                        };
                        worker.execute();
                    }
                }
            });
        }
    }//GEN-LAST:event_AddNewNoteActionPerformed

    private void DeleteNoteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteNoteActionPerformed
        String title = Title.getText();
        if (oneInstanceSecondThread == false){
            SwingWorker<Boolean, Void> worker = new SwingWorker<Boolean, Void>(){

                @Override
                protected Boolean doInBackground() throws Exception {
                    oneInstanceSecondThread = true;
                    try {
                        conn con = new conn();
                        String sql = "DELETE FROM notes WHERE note_title  = ?";
                        PreparedStatement st = con.c.prepareStatement(sql);

                        st.setString(1, title);
                        st.executeUpdate();
                        con.closeConnection();
                        TodoListMainFrame refresh = new TodoListMainFrame();
                        refresh.refresh();
                    }catch (Exception e){
                        JOptionPane.showMessageDialog(null, "An error occured while deleting this note! \n "+e, "Error!", JOptionPane.PLAIN_MESSAGE);        
                    }
                    return true;
                }

                @Override
                protected void done(){
                    try {
                        Boolean status = get();
                        if (status == true){
                            deleteFrame();
                        }
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(null, "An error occured while  ", "Error!", JOptionPane.PLAIN_MESSAGE);
                    }
                }
            };
            worker.execute();
        }
    }//GEN-LAST:event_DeleteNoteActionPerformed

    private void SaveNoteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveNoteActionPerformed
        String title = Title.getText();
        String findTitle = title;
        try {
            conn con = new conn();
            String sql = "UPDATE notes SET note_content=? WHERE note_title='"+findTitle+"'";
            PreparedStatement st = con.c.prepareStatement(sql);
            st.setString(1, Note.getText());
            st.executeUpdate();
            
            con.closeConnection();
        }catch (Exception e){
            JOptionPane.showMessageDialog(null, "An error occured while saving this note! \n "+e, "Error!", JOptionPane.PLAIN_MESSAGE);
        }
    }//GEN-LAST:event_SaveNoteActionPerformed

    private void TopNavbarActionsMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TopNavbarActionsMouseReleased
        try {
            conn con = new conn();
            String sql = "UPDATE screen_location SET screen_location_x=?, screen_location_y=?";
            PreparedStatement st = con.c.prepareStatement(sql);
            st.setInt(1, screenLocationX);
            st.setInt(2, screenLocationY);
            st.executeUpdate();
            
            con.closeConnection();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "An error occured while trying to save last known window location! \n "+e, "Error!", JOptionPane.PLAIN_MESSAGE);
        }
    }//GEN-LAST:event_TopNavbarActionsMouseReleased

    private void ProfilePictureMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ProfilePictureMouseClicked
        if (oneInstanceSecondThread == false){
            FileNameExtensionFilter filter = new FileNameExtensionFilter("Image Files", "jpg", "png", "jpeg");
            String outputPath = System.getProperty("user.home")+"\\pictures";
            JFileChooser chooser = new JFileChooser(outputPath);
            chooser.setFileFilter(filter);
            int result = chooser.showOpenDialog(null);
            File file = chooser.getSelectedFile();
            
            if (result == JFileChooser.APPROVE_OPTION) {
                SwingWorker<Boolean, Void> worker = new SwingWorker<Boolean, Void>(){

                    @Override
                    protected Boolean doInBackground() throws Exception {
                        oneInstanceSecondThread = true;
                        if (file!=null){
                            String filePath = file.getAbsolutePath();
                            try {
                                conn con = new conn();
                                String sql = "UPDATE profile_picture SET pfp_dir=?";
                                PreparedStatement st = con.c.prepareStatement(sql);
                                st.setString(1, filePath);
                                st.executeUpdate();

                                con.closeConnection();
                                TodoListMainFrame start = new TodoListMainFrame();
                                start.setVisible(true);
                            } catch (Exception e) {
                                JOptionPane.showMessageDialog(null, "An error occured while updating profile picture! \n "+e, "Error!", JOptionPane.PLAIN_MESSAGE);
                            }
                        }
                        return true;
                    }

                    @Override
                    protected void done(){
                        try {
                            Boolean status = get();
                            if (status == true){
                                deleteFrame();
                            }
                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(null, "An error occured while  ", "Error!", JOptionPane.PLAIN_MESSAGE);
                        }
                    }
                };
                worker.execute();
            }
        }
    }//GEN-LAST:event_ProfilePictureMouseClicked

    private void checkCredentials(){
        String path = System.getProperty("user.dir");
        File credentialsPath = new File(path+"\\tokens\\StoredCredential");
        if (credentialsPath.exists()){
            GoogleLogin.setVisible(false);
            GoogleLogout.setVisible(true);
        } else {
            GoogleLogin.setVisible(true);
            GoogleLogout.setVisible(false);
            refreshClassTodo.setVisible(false);
        }
    }
    
    private void refreshClassTodoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshClassTodoActionPerformed
        if (oneInstanceSecondThread == false){
            refreshClassTodo.setVisible(false);
            GoogleLogout.setVisible(false);
            AddNewTask.setVisible(false);
            AddNewNote.setVisible(false);
            DeleteNote.setVisible(false);
            SaveNote.setVisible(false);
            SwingWorker<Boolean, String> worker = new SwingWorker<Boolean, String>(){

                @Override
                protected Boolean doInBackground() throws Exception {
                    oneInstanceSecondThread = true;
                    publish("Refreshing. Please wait.");
                    GoogleClassroomProcess start = new GoogleClassroomProcess();
                    start.googleLogin();

                    return true;
                }

                @Override
                protected void process(List<String> chunks){
                    String message = chunks.get(chunks.size() -1);
                    Tip.setText(message);
                }

                @Override
                protected void done(){
                    try {
                        Boolean status = get();
                        if (status == true){
                            deleteFrame();
                        }
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(null, "An error occured while trying to refresh google classroom tasks! ", "Error!", JOptionPane.PLAIN_MESSAGE);
                    }
                }
            };

            worker.execute();
        }
    }//GEN-LAST:event_refreshClassTodoActionPerformed

    private void GoogleLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GoogleLoginActionPerformed
        if (oneInstanceSecondThread == false){
            GoogleLogin.setVisible(false);
            AddNewTask.setVisible(false);
            AddNewNote.setVisible(false);
            DeleteNote.setVisible(false);
            SaveNote.setVisible(false);
            SwingWorker<Boolean, String> worker = new SwingWorker<Boolean, String>(){

                @Override
                protected Boolean doInBackground() throws Exception {
                    oneInstanceSecondThread = true;
                    publish("Logging in. Please wait.");
                    GoogleClassroomProcess start = new GoogleClassroomProcess();
                    start.googleLogin();

                    return true;
                }

                @Override
                protected void process(List<String> chunks){
                    String message = chunks.get(chunks.size() -1);
                    Tip.setText(message);
                }

                @Override
                protected void done(){
                    try {
                        Boolean status = get();
                        if (status == true){
                            deleteFrame();
                        }
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(null, "An error occured while trying to refresh google classroom tasks! ", "Error!", JOptionPane.PLAIN_MESSAGE);
                    }
                }
            };

            worker.execute();
        }
    }//GEN-LAST:event_GoogleLoginActionPerformed

    private void GoogleLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GoogleLogoutActionPerformed
        if (oneInstanceSecondThread == false){
            String path = System.getProperty("user.dir");
            File credentialsPath = new File(path+"\\tokens\\StoredCredential");
            if (credentialsPath.delete()){
                JOptionPane.showMessageDialog(null, "Google Account successfully logged out in this device. ", "Sucess!", JOptionPane.PLAIN_MESSAGE);
                SwingWorker<Boolean, Void> worker = new SwingWorker<Boolean, Void>(){

                    @Override
                    protected Boolean doInBackground() throws Exception {
                        oneInstanceSecondThread = true;
                        GoogleClassroomProcess start = new GoogleClassroomProcess();
                        start.logoutGoogle();
                        return true;
                    }

                    @Override
                    protected void done(){
                        try {
                            Boolean status = get();
                            if (status == true){
                                deleteFrame();
                            }
                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(null, "An error occured while trying to create new task! ", "Error!", JOptionPane.PLAIN_MESSAGE);
                        }
                    }
                };
                worker.execute();
            } else {
                JOptionPane.showMessageDialog(null, "An error occured while trying to log out google account! ", "Error!", JOptionPane.PLAIN_MESSAGE);
            }
        }
    }//GEN-LAST:event_GoogleLogoutActionPerformed

    public void refresh(){
        this.MainPanel.setSelectedComponent(NotesPanel);
        this.setVisible(true);
    }
    
    public void updateFrame(){
        this.invalidate();
        this.validate();
        this.repaint();
    }
    
    public void displayNotes(String sentTitle){
        Note.setVisible(true);
        SaveNote.setVisible(true);
        DeleteNote.setVisible(true);
        NoteScroller.setVisible(true);
        String title = sentTitle;
        this.MainPanel.setSelectedComponent(NotesPanel);
        this.setVisible(true);
        try {
            conn con = new conn();
            String sql = "select * from notes where note_title = ?";
            PreparedStatement st = con.c.prepareStatement(sql);
            st.setString(1, title);
            ResultSet rs = st.executeQuery();
            
            if(rs.next()){
                this.Title.setText(rs.getString("note_title"));
                this.Note.setText(rs.getString("note_content"));
            }
            rs.close();
            st.close();
            con.closeConnection();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "An error occured while trying to display notes! \n "+e, "Error!", JOptionPane.PLAIN_MESSAGE);
        }
    }
    
    private void refreshNotes(){
        String title = "";
        try {
            conn con = new conn();
            String sql = "SELECT * from notes";
            PreparedStatement st = con.c.prepareStatement(sql);
            ResultSet rs = st.executeQuery();
            
            while(rs.next()){
                NotesListInfo addNew = new NotesListInfo();
                title = rs.getString("note_title");
                
                addNew.getInfo(title);
                Notes.add(addNew, gbc);
                
                addNew.getView().addMouseListener(new MouseAdapter(){
                    @Override
                    public void mousePressed(MouseEvent e){
                        if (oneInstanceSecondThread == false){
                            SwingWorker<Boolean, Void> worker = new SwingWorker<Boolean, Void>(){

                                @Override
                                protected Boolean doInBackground() throws Exception {
                                    oneInstanceSecondThread = true;
                                    addNew.viewNote();
                                    return true;
                                }

                                @Override
                                protected void done(){
                                    try {
                                        Boolean status = get();
                                        if (status == true){
                                            deleteFrame();
                                        }
                                    } catch (Exception e) {
                                        JOptionPane.showMessageDialog(null, "An error occured while  ", "Error!", JOptionPane.PLAIN_MESSAGE);
                                    }
                                }
                            };
                            worker.execute();
                        }
                    }
                });   
            }
            rs.close();
            st.close();
            con.closeConnection();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "An error occured while trying to refresh notes! \n "+e, "Error!", JOptionPane.PLAIN_MESSAGE);
        }
        Note.setVisible(false);
        SaveNote.setVisible(false);
        DeleteNote.setVisible(false);
        NoteScroller.setVisible(false);
    }
    
    private void refreshAllList(){
        refreshClassroomList();
        refreshList();
        UnfinishedTask.setText("Unfinished Task: "+taskCounter);
    }
    
    private void refreshClassroomList(){
        String message = "";
        String date = "";
        String status= "";
        try {
            conn con = new conn();
            String sql = "SELECT * from classroom_todolist";
            PreparedStatement st = con.c.prepareStatement(sql);
            ResultSet rs = st.executeQuery();
            
            while(rs.next()){
                GoogleClassroomTodoListInfo addNew = new GoogleClassroomTodoListInfo();
                message = rs.getString("todo_message");
                date = rs.getString("todo_deadline");
                status = rs.getString("status");
                
                addNew.getInfo(message,date,status);
                List.add(addNew, gbc);
                
                addNew.getDone().addMouseListener(new MouseAdapter(){
                    @Override
                    public void mousePressed(MouseEvent e){
                        addNew.changeState();
                    }
                });
                taskCounter++;
            }
            rs.close();
            st.close();
            con.closeConnection();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "An error occured while trying to refresh classroom todo list! \n "+e, "Error!", JOptionPane.PLAIN_MESSAGE);
        }
    }
    
    private void refreshList(){
        String message = "";
        String date = "";
        String status= "";
        try {
            conn con = new conn();
            String sql = "SELECT * from todolist";
            PreparedStatement st = con.c.prepareStatement(sql);
            ResultSet rs = st.executeQuery();
            
            while(rs.next()){
                TodoListInfo addNew = new TodoListInfo();
                message = rs.getString("todo_message");
                date = rs.getString("todo_deadline");
                status = rs.getString("status");
                
                addNew.getInfo(message,date,status);
                List.add(addNew, gbc);
                
                addNew.getDone().addMouseListener(new MouseAdapter(){
                    @Override
                    public void mousePressed(MouseEvent e){
                        if (oneInstanceSecondThread == false){
                            SwingWorker<Boolean, Void> worker = new SwingWorker<Boolean, Void>(){

                                @Override
                                protected Boolean doInBackground() throws Exception {
                                    oneInstanceSecondThread = true;
                                    addNew.changeState();
                                    return true;
                                }

                                @Override
                                protected void done(){
                                    try {
                                        Boolean status = get();
                                        if (status == true){
                                            deleteFrame();
                                        }
                                    } catch (Exception e) {
                                        JOptionPane.showMessageDialog(null, "An error occured while trying to create new task! ", "Error!", JOptionPane.PLAIN_MESSAGE);
                                    }
                                }
                            };
                            worker.execute();
                        }
                    }
                });
                taskCounter++;
            }
            rs.close();
            st.close();
            con.closeConnection();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "An error occured while trying to refresh todo list! \n "+e, "Error!", JOptionPane.PLAIN_MESSAGE);
        }
    }
    
    public void deleteFrame(){
        this.setVisible(false);
    }
    
    public void requestRefresh(){
        this.MainPanel.setSelectedComponent(NotesPanel);
        this.setVisible(true);
    }
    
    public void setScreenLocation(){
        try {
            conn con = new conn();
            String sql = "SELECT * from screen_location";
            PreparedStatement st = con.c.prepareStatement(sql);
            ResultSet rs = st.executeQuery();
            
            while(rs.next()){
                screenLocationX = rs.getInt("screen_location_x");
                screenLocationY = rs.getInt("screen_location_y");
            }
            
            rs.close();
            st.close();
            con.closeConnection();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "An error occured while trying to set screen location! \n "+e, "Error!", JOptionPane.PLAIN_MESSAGE);
        }
        setLocation(screenLocationX,screenLocationY);
    }
    
    public void scale(){
        String location="";
        try {
            conn con = new conn();
            String sql = "SELECT * from profile_picture";
            PreparedStatement st = con.c.prepareStatement(sql);
            ResultSet rs = st.executeQuery();
            
            while (rs.next()){
                location = rs.getString("pfp_dir");
            }
            
            rs.close();
            st.close();
            con.closeConnection();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "An error occured while trying to scale profile picture! \n "+e, "Error!", JOptionPane.PLAIN_MESSAGE);
        }
        
        Toolkit t = Toolkit.getDefaultToolkit();
        Image image = t.getImage(location);
        Image newImage = image.getScaledInstance(100, 100, Image.SCALE_SMOOTH);
        icon = new ImageIcon(newImage);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TodoListMainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TodoListMainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TodoListMainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TodoListMainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TodoListMainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddNewNote;
    private javax.swing.JButton AddNewTask;
    private javax.swing.JLabel CloseButton;
    private javax.swing.JButton DeleteNote;
    private javax.swing.JButton GoogleLogin;
    private javax.swing.JButton GoogleLogout;
    private javax.swing.JPanel List;
    private javax.swing.JTabbedPane MainPanel;
    private javax.swing.JLabel MinimizeButton;
    private javax.swing.JTextArea Note;
    private javax.swing.JPanel NotePanel;
    private javax.swing.JScrollPane NoteScroller;
    private javax.swing.JPanel Notes;
    private javax.swing.JLabel NotesButton;
    private javax.swing.JPanel NotesList;
    private javax.swing.JLabel NotesListTitle;
    private javax.swing.JPanel NotesPanel;
    private javax.swing.JScrollPane NotesScroller;
    private javax.swing.JLabel ProfilePicture;
    private javax.swing.JButton SaveNote;
    private javax.swing.JLabel Tip;
    private javax.swing.JLabel Title;
    private javax.swing.JLabel TodoButton;
    private javax.swing.JPanel TodoOverview;
    private javax.swing.JPanel TodoPanel;
    private javax.swing.JScrollPane TodoScroller;
    private javax.swing.JPanel TopNavbar;
    private javax.swing.JLabel TopNavbarActions;
    private javax.swing.JLabel UnfinishedTask;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JButton refreshClassTodo;
    // End of variables declaration//GEN-END:variables
}
